<?php
/**
 * Implementation of hook_perm()
 */
function http_reject_perm() {
  return array('administer http_reject');
}

/**
 * Implementation of hook_menu()
 */
function http_reject_menu() {
  $items['admin/settings/http_reject'] = array(
    'title' => t('HTTP Reject'),
    'decription' => t('Configure HTTP Reject settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('http_reject_admin_form'),
    'access arguments' => array('administer http_reject'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'http_reject.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_boot()
 *
 * Look at the request and see if it needs to be rejected.
 *
 * @todo: Preg regexes for user agents.
 */
function http_reject_boot() {
  // Load settings.
  $settings = variable_get('http_reject', http_reject_defaults());

  // Make an array of allowed types and make sure to merge in
  // the types that MUST ALWAYS be allowed.
  $allowed_methods = array_merge($settings['methods']['allowed'], array('GET', 'POST', 'HEAD'));

  // Load the HTTP status codes.
  $codes = http_reject_codes();

  // If the current request method is not accepted, die.
  if (!in_array($_SERVER['REQUEST_METHOD'], $allowed_methods)) {
    http_reject_die($settings['methods']['code'], $codes[$settings['methods']['code']]);
  }
}

// --------------------------------------------------------------------------
// Helpers.

/**
 * Emit a HTTP header and die.
 *
 * @param $code
 *   Valid HTTP status code.
 * @param $message
 *   Message string.
 */
function http_reject_die($code = 405, $message = 'Method Not Allowed') {
  header('HTTP/1.1 ' . $code . ' ' . check_plain($message));

  // Status code 405 MUST include a list of allowable methods. Not including this here
  // would violate RFC2616.
  if ($code == 405) {
    $settings = variable_get('http_reject', http_reject_defaults());
    header('Allow: ' . implode(' ', $settings['methods']['allowed']));
  }
  exit();
}

/**
 * Assemble default settings.
 */
function http_reject_defaults() {
  return array(
    'methods' => array(
      'allowed' => array('GET', 'POST', 'HEAD'),
      'code' => 405,
    ),
  );
}

/**
 * Make an option list of status codes.
 *
 * @param $optionlist
 *   Boolean - return an option list (or a simple array).
 */
function http_reject_codes($optionlist = FALSE) {
  $codes = array(
    400 => 'Bad Request',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    409 => 'Conflict',
    418 => 'I\'m a teapot',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    503 => 'Service Unavailable',
  );

  if ($optionlist) {
    foreach($codes as $code => $message) {
      $codes[$code] = 'HTTP ' . $code . ' ' . $message;
    }
  }

  return $codes;
}
